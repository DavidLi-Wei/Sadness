<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sadness.ADO.Helper</name>
    </assembly>
    <members>
        <member name="T:ADO.Helper.Access.AccessFieldType">
            <summary>
            Access字段类型枚举类
            创建日期:2016年12月22日
            </summary>
        </member>
        <member name="T:ADO.Helper.Access.AccessFieldType.FieldType">
            <summary>
            Access特定的数据类型。
            </summary>
        </member>
        <member name="M:ADO.Helper.Access.AccessFieldType.GetFieldType(System.String)">
            <summary>
            从字段类型Code获得字段类型
            </summary>
            <param name="strFieldTypeCode">字段类型Code</param>
            <returns>成功返回字段类型,失败返回-1</returns>
        </member>
        <member name="T:ADO.Helper.Access.AccessHelper">
            <summary>
            Access数据库帮助类
            创建日期:2016年12月21日
            </summary>
        </member>
        <member name="P:ADO.Helper.Access.AccessHelper.strAccessConnection">
            <summary>
            Access连接字符串
            </summary>
        </member>
        <member name="F:ADO.Helper.Access.AccessHelper.Connection">
            <summary>
            表示一个到 Access 数据库的打开的连接
            </summary>
        </member>
        <member name="F:ADO.Helper.Access.AccessHelper.Transaction">
            <summary>
            表示要在 Access 数据库中处理的 Transact-SQL 事务
            </summary>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.AccessConnectionString(System.String)">
            <summary>
            直接传给帮助类Access连接字符串
            </summary>
            <param name="AccessConnection">Access连接字符串</param>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.AccessConnectionPath_Office2003(System.String)">
            <summary>
            传给帮助类Access连接字符串需要的信息
            Microsoft.Jet.OLEDB.4.0
            </summary>
            <param name="source">数据库文件路径</param>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.AccessConnectionPath_Office2007(System.String)">
            <summary>
            传给帮助类Access连接字符串需要的信息
            Microsoft.ACE.OLEDB.12.0
            </summary>
            <param name="source">数据库文件路径</param>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetConnectionString">
            <summary>
            得到数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.Open">
            <summary>
            使用所指定的属性设置打开数据库连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.Close">
            <summary>
            关闭与数据库的连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.CommitTransaction">
            <summary>
            提交事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.CreateDataBase(System.String)">
            <summary>
            创建数据库
            </summary>
            <param name="strDataSourcePath">数据库路径和数据库名</param>
            <returns>成功返回0,失败返回-1(创建数据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.CreateTable(System.String,System.String)">
            <summary>
            创建数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="strNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.CreateTable(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建数据库表(Dictionary储存列名和列类型)
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.DropDataBase(System.String)">
            <summary>
            删除数据库(Access数据库删除数据库就是删除文件)
            </summary>
            <param name="strDBName">数据库文件路径</param>
            <returns>成功返回0,失败返回-1(删除据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.DropTable(System.String)">
            <summary>
            删除数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回0,失败返回-1(删除据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.DeleteTableData(System.String)">
            <summary>
            删除数据库表中的内容
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回受影响的行数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetAllTableName">
            <summary>
            得到数据库中所有表名
            </summary>
            <returns>数据库中所有表名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetAllFieldName(System.String)">
            <summary>
            得到指定表中所有字段名
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetAllFieldNameType(System.String)">
            <summary>
            得到指定表中所有字段名和字段类型
            Access数据库没有准确字段类型,得到结果会有一定误差
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名和字段类型(Dictionary)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询SQL语句
            </summary>
            <param name="sqlExecuteNonQuery">非查询SQL</param>
            <returns>成功返回受影响的行数,失败或非数据操作成功返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            执行非查询SQL语句(批量执行)
            </summary>
            <param name="listExecuteNonQuery">SQL语句集合</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetDataSet(System.String)">
            <summary>
            执行查询SQL语句(存到DataSet)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetDataSet(System.Collections.Generic.List{System.String})">
            <summary>
            执行查询SQL语句(存到DataSet)(多表)
            </summary>
            <param name="listSelect">查询SQL集合</param>
            <returns>DataSet(多表)</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.GetDataTable(System.String)">
            <summary>
            执行查询SQL语句(存到DataTable)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveData(System.String,System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveByteData(System.String,System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveByteData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Access.AccessHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="T:ADO.Helper.DatabaseConversion.DataProcessing">
            <summary>
            数据处理类
            创建日期:2016年12月22日
            </summary>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.DataProcessing.DataTableFiltered(System.Data.DataTable,System.String)">
            <summary>
            对DataTable进行筛选过滤
            </summary>
            <param name="dtDataSource">源数据(DataTable)</param>
            <param name="sqlFilterConditions">过滤条件(WHERE语句)</param>
            <returns>筛选过滤后的DataTable</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.DataProcessing.RemoveEmpty(System.Data.DataTable)">
            <summary>
            删除DataTable中的空行
            弱引用,可直接修改参数
            </summary>
            <param name="dtDataSource">源数据(DataTable)</param>
            <returns>删除空行后的DataTable</returns>
        </member>
        <!-- 对于成员“M:ADO.Helper.DatabaseConversion.DataProcessing.ConvertToList``1(System.Data.DataTable)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:ADO.Helper.DatabaseConversion.DataProcessing.ConvertDataTable(System.Collections.IList)”忽略有格式错误的 XML 注释 -->
        <member name="M:ADO.Helper.DatabaseConversion.DataProcessing.PagingQuery(System.Data.DataTable,System.Int32)">
            <summary>
            DataTable分页查询
            </summary>
            <param name="dtDataSource">源数据(DataTable)</param>
            <param name="iPageSize">每页条数</param>
            <returns>每页保存在DataSet中</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.DataProcessing.PagingQuery(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            DataTable分页查询
            </summary>
            <param name="dtDataSource">源数据(DataTable)</param>
            <param name="iPageNo">页码</param>
            <param name="iPageSize">每页条数</param>
            <returns>指定页码的DataTable数据</returns>
        </member>
        <member name="T:ADO.Helper.DatabaseConversion.SqlProcessing">
            <summary>
            Sql语句处理类
            创建日期:2017年4月24日
            </summary>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.SqlProcessing.RemoveIllegal(System.String)">
            <summary>
            去除非法字符'\\ufeff'
            </summary>
            <param name="strSource">数据源</param>
            <returns>修正后的字符</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.SqlProcessing.StringToUnicode(System.String)">
            <summary>
            String转Unicode,并去除'\\ufeff'非法字符
            </summary>
            <param name="strSource">数据源</param>
            <returns>Unicode编码字符</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.SqlProcessing.UnicodeToString(System.String)">
            <summary>
            Unicode转String
            </summary>
            <param name="strSource">数据源</param>
            <returns>String类型编码字符</returns>
        </member>
        <member name="T:ADO.Helper.DatabaseConversion.TypeProcessing">
            <summary>
            数据类型处理类
            创建日期:2016年12月22日
            </summary>
        </member>
        <member name="T:ADO.Helper.DatabaseConversion.TypeProcessing.DataBase">
            <summary>
            数据库枚举
            </summary>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.FieldTypeProcessing(System.Collections.Generic.Dictionary{System.String,System.String},ADO.Helper.DatabaseConversion.TypeProcessing.DataBase)">
            <summary>
            字段类型修改
            根据不同的数据库修改为改数据库可用的字段类型
            </summary>
            <param name="dicDataSource">源字段名和字段类型</param>
            <param name="dbType">数据库类型</param>
            <returns>修改后字段名和字段类型</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.SplitTypeAndLength(System.String,System.String@,System.String@)">
            <summary>
            拆分字段类型的类型和长度,或是主外键是否为空
            </summary>
            <param name="sqlTypeAndLength">源字符串</param>
            <param name="strFieldType">拆分后的字段类型</param>
            <param name="strMaxLength">拆分后的字段长度或是主外键是否为空</param>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.FieldTypeModify_SqlServer(System.String,System.String)">
            <summary>
            字段类型修改_SqlServer
            </summary>
            <param name="strFieldType">源字段类型</param>
            <param name="strMaxLength">源字段长度</param>
            <returns>修改后字段类型</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.FieldTypeModify_Oracle(System.String,System.String)">
            <summary>
            字段类型修改_Oracle
            </summary>
            <param name="strFieldType">源字段类型</param>
            <param name="strMaxLength">源字段长度</param>
            <returns>修改后字段类型</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.FieldTypeModify_MySql(System.String,System.String)">
            <summary>
            字段类型修改_MySql
            </summary>
            <param name="strFieldType">源字段类型</param>
            <param name="strMaxLength">源字段长度</param>
            <returns>修改后字段类型</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.FieldTypeModify_Access(System.String,System.String)">
            <summary>
            字段类型修改_Access
            </summary>
            <param name="strFieldType">源字段类型</param>
            <param name="strMaxLength">源字段长度</param>
            <returns>修改后字段类型</returns>
        </member>
        <member name="M:ADO.Helper.DatabaseConversion.TypeProcessing.FieldTypeModify_SQLite(System.String,System.String)">
            <summary>
            字段类型修改_SQLite
            </summary>
            <param name="strFieldType">源字段类型</param>
            <param name="strMaxLength">源字段长度</param>
            <returns>修改后字段类型</returns>
        </member>
        <member name="T:ADO.Helper.MySql.MySqlFieldType">
            <summary>
            MySql字段类型枚举类
            创建日期:2016年12月19日
            </summary>
        </member>
        <member name="T:ADO.Helper.MySql.MySqlFieldType.FieldType">
            <summary>
            MySql特定的数据类型。
            </summary>
        </member>
        <member name="T:ADO.Helper.MySql.MySqlHelper">
            <summary>
            MySql数据库帮助类
            创建日期:2016年12月19日
            </summary>
        </member>
        <member name="P:ADO.Helper.MySql.MySqlHelper.strMySqlConnection">
            <summary>
            MySql连接字符串
            </summary>
        </member>
        <member name="F:ADO.Helper.MySql.MySqlHelper.Connection">
            <summary>
            表示一个到 MySql 数据库的打开的连接
            </summary>
        </member>
        <member name="F:ADO.Helper.MySql.MySqlHelper.Transaction">
            <summary>
            表示要在 MySql 数据库中处理的 Transact-SQL 事务
            </summary>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.MySqlConnectionString(System.String)">
            <summary>
            直接传给帮助类MySql连接字符串
            </summary>
            <param name="MySqlConnection">MySql连接字符串</param>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.MySqlConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            传给帮助类MySql连接字符串需要的信息(端口号默认3306)
            </summary>
            <param name="server">IP地址</param>
            <param name="id">用户名</param>
            <param name="password">密码</param>
            <param name="database">数据库名</param>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.MySqlConnectionString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            传给帮助类MySql连接字符串需要的信息
            </summary>
            <param name="server">IP地址</param>
            <param name="id">用户名</param>
            <param name="password">密码</param>
            <param name="database">数据库名</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetConnectionString">
            <summary>
            得到数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.Open">
            <summary>
            使用所指定的属性设置打开数据库连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.Close">
            <summary>
            关闭与数据库的连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.CommitTransaction">
            <summary>
            提交事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.CreateDataBase(System.String)">
            <summary>
            创建数据库(默认utf8_general_ci字符集)
            </summary>
            <param name="strDBName">数据库库名</param>
            <returns>成功返回0,失败返回-1(创建数据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.CreateTable(System.String,System.String)">
            <summary>
            创建数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="strNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.CreateTable(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建数据库表(Dictionary储存列名和列类型)
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.DropDataBase(System.String)">
            <summary>
            删除数据库
            </summary>
            <param name="strDBName">数据库库名</param>
            <returns>成功返回0,失败返回-1(删除据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.DropTable(System.String)">
            <summary>
            删除数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回0,失败返回-1(删除据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.DeleteTableData(System.String)">
            <summary>
            删除数据库表中的内容
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回受影响的行数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetAllDataBaseName">
            <summary>
            得到所有数据库名
            </summary>
            <returns>SqlServer中所有数据库名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetAllTableName">
            <summary>
            得到数据库中所有表名
            </summary>
            <returns>数据库中所有表名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetAllFieldName(System.String)">
            <summary>
            得到指定表中所有字段名
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetAllFieldNameType(System.String)">
            <summary>
            得到指定表中所有字段名和字段类型
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名和字段类型(Dictionary)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询SQL语句
            </summary>
            <param name="sqlExecuteNonQuery">非查询SQL</param>
            <returns>成功返回受影响的行数,失败或非数据操作成功返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            执行非查询SQL语句(批量执行)
            </summary>
            <param name="listExecuteNonQuery">SQL语句集合</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetDataSet(System.String)">
            <summary>
            执行查询SQL语句(存到DataSet)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetDataSet(System.Collections.Generic.List{System.String})">
            <summary>
            执行查询SQL语句(存到DataSet)(多表)
            </summary>
            <param name="listSelect">查询SQL集合</param>
            <returns>DataSet(多表)</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.GetDataTable(System.String)">
            <summary>
            执行查询SQL语句(存到DataTable)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveData(System.String,System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveByteData(System.String,System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveByteData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.MySql.MySqlHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="T:ADO.Helper.Oracle.OracleFieldType">
            <summary>
            Oracle字段类型枚举类
            创建日期:2016年12月16日
            </summary>
        </member>
        <member name="T:ADO.Helper.Oracle.OracleFieldType.FieldType">
            <summary>
            Oracle特定的数据类型。
            </summary>
        </member>
        <member name="T:ADO.Helper.Oracle.OracleHelper">
            <summary>
            Oracle数据库帮助类
            创建日期:2016年12月14日
            </summary>
        </member>
        <member name="P:ADO.Helper.Oracle.OracleHelper.strOracleConnection">
            <summary>
            Oracle连接字符串
            </summary>
        </member>
        <member name="F:ADO.Helper.Oracle.OracleHelper.Connection">
            <summary>
            表示一个到 Oracle 数据库的打开的连接
            </summary>
        </member>
        <member name="F:ADO.Helper.Oracle.OracleHelper.Transaction">
            <summary>
            表示要在 Oracle 数据库中处理的 Transact-SQL 事务
            </summary>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.OracleConnectionString(System.String)">
            <summary>
            直接传给帮助类Oracle连接字符串
            </summary>
            <param name="OracleConnection">Oracle连接字符串</param>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.OracleConnectionString(System.String,System.String,System.String)">
            <summary>
            传给帮助类Oracle连接字符串需要的信息
            </summary>
            <param name="Source">IP地址和数据库名(可选)</param>
            <param name="Id">用户名</param>
            <param name="Password">密码</param>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetConnectionString">
            <summary>
            得到数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.Open">
            <summary>
            使用所指定的属性设置打开数据库连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.Close">
            <summary>
            关闭与数据库的连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.CommitTransaction">
            <summary>
            提交事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.CreateTable(System.String,System.String)">
            <summary>
            创建数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="strNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.CreateTable(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建数据库表(Dictionary储存列名和列类型)
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.DropTable(System.String)">
            <summary>
            删除数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回0,失败返回-1(删除据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.DeleteTableData(System.String)">
            <summary>
            删除数据库表中的内容
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回受影响的行数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetAllTableName">
            <summary>
            得到数据库中所有表名
            </summary>
            <returns>Oracle中所有数据库名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetAllFieldName(System.String)">
            <summary>
            得到指定表中所有字段名
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetAllFieldNameType(System.String)">
            <summary>
            得到指定表中所有字段名和字段类型
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名和字段类型(Dictionary)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询SQL语句
            </summary>
            <param name="sqlExecuteNonQuery">非查询SQL</param>
            <returns>成功返回受影响的行数,失败或非数据操作成功返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            执行非查询SQL语句(批量执行)
            </summary>
            <param name="listExecuteNonQuery">SQL语句集合</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetDataSet(System.String)">
            <summary>
            执行查询SQL语句(存到DataSet)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetDataSet(System.Collections.Generic.List{System.String})">
            <summary>
            执行查询SQL语句(存到DataSet)(多表)
            </summary>
            <param name="listSelect">查询SQL集合</param>
            <returns>DataSet(多表)</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.GetDataTable(System.String)">
            <summary>
            执行查询SQL语句(存到DataTable)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveData(System.String,System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveByteData(System.String,System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveByteData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.Oracle.OracleHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="T:ADO.Helper.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:ADO.Helper.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:ADO.Helper.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:ADO.Helper.SQLite.SQLiteFieldType">
            <summary>
            SQLite字段类型枚举类
            创建日期:2016年12月19日
            </summary>
        </member>
        <member name="T:ADO.Helper.SQLite.SQLiteFieldType.FieldType">
            <summary>
            SQLite特定的数据类型。
            </summary>
        </member>
        <member name="T:ADO.Helper.SQLite.SQLiteHelper">
            <summary>
            SQLite数据库帮助类
            创建日期:2016年12月19日
            </summary>
        </member>
        <member name="P:ADO.Helper.SQLite.SQLiteHelper.strSQLiteConnection">
            <summary>
            SQLite连接字符串
            </summary>
        </member>
        <member name="F:ADO.Helper.SQLite.SQLiteHelper.Connection">
            <summary>
            表示一个到 SQLite 数据库的打开的连接
            </summary>
        </member>
        <member name="F:ADO.Helper.SQLite.SQLiteHelper.Transaction">
            <summary>
            表示要在 SQLite 数据库中处理的 Transact-SQL 事务
            </summary>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SQLiteConnectionString(System.String)">
            <summary>
            直接传给帮助类SQLite连接字符串
            </summary>
            <param name="SQLiteConnection">SQLite连接字符串</param>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SQLiteConnectionPath(System.String)">
            <summary>
            传给帮助类SQLite连接字符串需要的信息
            </summary>
            <param name="source">数据库文件路径</param>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetConnectionString">
            <summary>
            得到数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.Open">
            <summary>
            使用所指定的属性设置打开数据库连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.Close">
            <summary>
            关闭与数据库的连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.CommitTransaction">
            <summary>
            提交事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.CreateDataBase(System.String)">
            <summary>
            创建数据库(SQLite数据库文件格式任意)
            这只是创建一个零字节文件的 SQLite
            正确地打开该文件时,会变成一个数据库.
            </summary>
            <param name="strDataSourcePath">数据库路径和数据库名</param>
            <returns>成功返回0,失败返回-1(创建数据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.CreateTable(System.String,System.String)">
            <summary>
            创建数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="strNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.CreateTable(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建数据库表(Dictionary储存列名和列类型)
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.DropDataBase(System.String)">
            <summary>
            删除数据库(SQLite数据库删除数据库就是删除文件)
            </summary>
            <param name="strDBName">数据库文件路径</param>
            <returns>成功返回0,失败返回-1(删除据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.DropTable(System.String)">
            <summary>
            删除数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回0,失败返回-1(删除据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.DeleteTableData(System.String)">
            <summary>
            删除数据库表中的内容
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回受影响的行数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetAllTableName">
            <summary>
            得到数据库中所有表名
            </summary>
            <returns>数据库中所有表名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetAllFieldName(System.String)">
            <summary>
            得到指定表中所有字段名
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetAllFieldNameType(System.String)">
            <summary>
            得到指定表中所有字段名和字段类型
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名和字段类型(Dictionary)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询SQL语句
            </summary>
            <param name="sqlExecuteNonQuery">非查询SQL</param>
            <returns>成功返回受影响的行数,失败或非数据操作成功返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            执行非查询SQL语句(批量执行)
            </summary>
            <param name="listExecuteNonQuery">SQL语句集合</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetDataSet(System.String)">
            <summary>
            执行查询SQL语句(存到DataSet)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetDataSet(System.Collections.Generic.List{System.String})">
            <summary>
            执行查询SQL语句(存到DataSet)(多表)
            </summary>
            <param name="listSelect">查询SQL集合</param>
            <returns>DataSet(多表)</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.GetDataTable(System.String)">
            <summary>
            执行查询SQL语句(存到DataTable)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveData(System.String,System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveByteData(System.String,System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveByteData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SQLite.SQLiteHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="T:ADO.Helper.SqlServer.SqlServerFieldType">
            <summary>
            SqlServer字段类型枚举类
            创建日期:2016年12月14日
            </summary>
        </member>
        <member name="T:ADO.Helper.SqlServer.SqlServerFieldType.FieldType">
            <summary>
            指定要用于 System.Data.SqlClient.SqlParameter 中的字段和属性的 SQL Server 特定的数据类型。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.BIGINT">
            <summary>
            System.Int64. 64 位的有符号整数。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.BINARY">
            <summary>
            System.Byte 类型的 System.Array。 二进制数据的固定长度流，范围在 1 到 8,000 个字节之间。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.BIT">
            <summary>
            System.Boolean. 无符号数值，可以是 0、1 或 null。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.CHAR">
            <summary>
            System.String. 非 Unicode 字符的固定长度流，范围在 1 到 8,000 个字符之间。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.DATETIME">
            <summary>
            System.DateTime. 日期和时间数据，值范围从 1753 年 1 月 1 日到 9999 年 12 月 31 日，精度为 3.33 毫秒。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.DECIMAL">
            <summary>
            System.Decimal. 固定精度和小数位数数值，在 -10 38 -1 和 10 38 -1 之间。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.FLOAT">
            <summary>
            System.Double. -1.79E +308 到 1.79E +308 范围内的浮点数。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.IMAGE">
            <summary>
            System.Byte 类型的 System.Array。 二进制数据的可变长度流，范围在 0 到 2 31 -1（即 2,147,483,647）字节之间。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.INT">
            <summary>
            System.Int32. 32 位带符号整数。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.MONEY">
            <summary>
            System.Decimal. 货币值，范围在 -2 63（即 -922,337,203,685,477.5808）到 2 63 -1（即 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.NCHAR">
            <summary>
            System.String. Unicode 字符的固定长度流，范围在 1 到 4,000 个字符之间。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.NTEXT">
            <summary>
            System.String. Unicode 数据的可变长度流，最大长度为 2 30 - 1（即 1,073,741,823）个字符。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.NVARCHAR">
            <summary>
             System.String. Unicode 字符的可变长度流，范围在 1 到 4,000 个字符之间。 如果字符串大于 4,000 个字符，隐式转换会失败。
             在使用比 4,000 个字符更长的字符串时，请显式设置对象。 当数据库列为 nvarchar(max) 时，使用 System.Data.SqlDbType.NVarChar
             。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.REAL">
            <summary>
            System.Single. -3.40E +38 到 3.40E +38 范围内的浮点数。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.UNIQUEIDENTIFIER">
            <summary>
            System.Guid. 全局唯一标识符（或 GUID）。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.SMALLDATETIME">
            <summary>
            System.DateTime. 日期和时间数据，值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日，精度为 1 分钟。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.SMALLINT">
            <summary>
            System.Int16. 16 位带符号整数。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.SMALLMONEY">
            <summary>
            System.Decimal. 货币值，范围在 -214,748.3648 到 +214,748.3647 之间，精度为千分之十个货币单位。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.TEXT">
            <summary>
            System.String. 非 Unicode 数据的可变长度流，最大长度为 2 31 -1（即 2,147,483,647）个字符。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.TIMESTAMP">
            <summary>
            System.Byte 类型的 System.Array。 自动生成的二进制数字，它们保证在数据库中是唯一的。 timestamp 通常用作为表行添加版本戳的机制。
            存储大小为 8 字节。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.TINYINT">
            <summary>
            System.Byte. 8 位无符号整数。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.VARBINARY">
            <summary>
            System.Byte 类型的 System.Array。 二进制数据的可变长度流，范围在 1 到 8,000 个字节之间。 如果字节数组大于 8,000
            个字节，隐式转换会失败。 在使用比 8,000 个字节大的字节数组时，请显式设置对象。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.VARCHAR">
            <summary>
            System.String. 非 Unicode 字符的可变长度流，范围在 1 到 8,000 个字符之间。 当数据库列为 varchar(max)
            时，使用 System.Data.SqlDbType.VarChar 。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.VARIANT">
            <summary>
            System.Object. 特殊数据类型，可以包含数值、字符串、二进制或日期数据，以及 SQL Server 值 Empty 和 Null，后两个值在未声明其他类型的情况下采用。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.XML">
            <summary>
            XML 值。 使用 System.Data.SqlClient.SqlDataReader.GetValue(System.Int32) 方法或
            System.Data.SqlTypes.SqlXml.Value 属性获取字符串形式的 XML，或通过调用 System.Data.SqlTypes.SqlXml.CreateReader()
            方法获取 System.Xml.XmlReader 形式的 XML。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.UDT">
            <summary>
            SQL Server 2005 用户定义的类型 (UDT)。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.STRUCTURED">
            <summary>
            指定表值参数中包含的构造数据的特殊数据类型。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.DATE">
            <summary>
            日期数据，值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.TIME">
            <summary>
            基于 24 小时制的时间数据。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 对应于 SQL Server
            time 值。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.DATETIME2">
            <summary>
            日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为
            100 毫微秒。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.DATETIMEOFFSET">
            <summary>
            显示时区的日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到
            23:59:59.9999999，精度为 100 毫微秒。 时区值范围从 -14:00 到 +14:00。
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerFieldType.FieldType.NUMERIC">
            <summary>
            NUMERIC型字段可以存储从-1038到1038范围内的数
            2017年2月9日添加
            </summary>
        </member>
        <member name="T:ADO.Helper.SqlServer.SqlServerHelper">
            <summary>
            SqlServer数据库帮助类
            创建日期:2016年11月29日
            </summary>
        </member>
        <member name="P:ADO.Helper.SqlServer.SqlServerHelper.strSqlServerConnection">
            <summary>
            SqlServer连接字符串
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerHelper.Connection">
            <summary>
            表示一个到 SQL Server 数据库的打开的连接
            </summary>
        </member>
        <member name="F:ADO.Helper.SqlServer.SqlServerHelper.Transaction">
            <summary>
            表示要在 SQL Server 数据库中处理的 Transact-SQL 事务
            </summary>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SqlServerConnectionString(System.String)">
            <summary>
            直接传给帮助类SqlServer连接字符串
            </summary>
            <param name="SqlServerConnection">SqlServer连接字符串</param>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SqlServerConnectionString(System.String,System.String)">
            <summary>
            传给帮助类SqlServer连接字符串需要的信息
            使用Windows身份验证(SSPI)
            </summary>
            <param name="server">IP地址</param>
            <param name="database">数据库名</param>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SqlServerConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            传给帮助类SqlServer连接字符串需要的信息
            使用SqlServer身份验证(用户名,密码)
            </summary>
            <param name="server">IP地址</param>
            <param name="database">数据库名</param>
            <param name="uid">用户名</param>
            <param name="pwd">密码</param>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetConnectionString">
            <summary>
            得到数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.Open">
            <summary>
            使用所指定的属性设置打开数据库连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.Close">
            <summary>
            关闭与数据库的连接
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.CommitTransaction">
            <summary>
            提交事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.CreateDataBase(System.String)">
            <summary>
            创建数据库
            </summary>
            <param name="strDBName">数据库库名</param>
            <returns>成功返回0,失败返回-1(创建数据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.CreateDataBase(System.String,System.String)">
            <summary>
            创建数据库(保存路径)
            </summary>
            <param name="strDBName">数据库库名</param>
            <param name="strFolderPath">数据库保存路径(文件夹)</param>
            <returns>成功返回0,失败返回-1(创建数据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.CreateDataBase(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建数据库(详细信息)
            </summary>
            <param name="strDBName">数据库库名</param>
            <param name="strFolderPath">数据库保存路径(文件夹)</param>
            <param name="intSize">数据库初始大小</param>
            <param name="intMaxSize">数据库最大容量</param>
            <param name="intFilegrowth">数据库增长率</param>
            <param name="intLogSize">数据库日志初始大小</param>
            <param name="intLogMaxSize">数据库日志最大容量</param>
            <param name="intLogFilegrowth">数据库日志增长率</param>
            <returns>成功返回0,失败返回-1(创建数据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.CreateTable(System.String,System.String)">
            <summary>
            创建数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="strNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.CreateTable(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建数据库表(Dictionary储存列名和列类型)
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">数据库表字段名和字段类型</param>
            <returns>成功返回0,失败返回-1(创建数据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.DropDataBase(System.String)">
            <summary>
            删除数据库
            </summary>
            <param name="strDBName">数据库库名</param>
            <returns>成功返回0,失败返回-1(删除据库无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.DropTable(System.String)">
            <summary>
            删除数据库表
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回0,失败返回-1(删除据库表无法返回行数)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.DeleteTableData(System.String)">
            <summary>
            删除数据库表中的内容
            </summary>
            <param name="strTableName">数据库表名</param>
            <returns>成功返回受影响的行数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetAllDataBaseName">
            <summary>
            得到所有数据库名
            </summary>
            <returns>SqlServer中所有数据库名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetAllTableName">
            <summary>
            得到数据库中所有表名
            </summary>
            <returns>数据库中所有表名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetAllFieldName(System.String)">
            <summary>
            得到指定表中所有字段名
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名(listString)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetAllFieldNameType(System.String)">
            <summary>
            得到指定表中所有字段名和字段类型
            </summary>
            <param name="strTableName">指定表名</param>
            <returns>表中所有字段名和字段类型(Dictionary)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询SQL语句
            </summary>
            <param name="sqlExecuteNonQuery">非查询SQL</param>
            <returns>成功返回受影响的行数,失败或非数据操作成功返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            执行非查询SQL语句(批量执行)
            </summary>
            <param name="listExecuteNonQuery">SQL语句集合</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetDataSet(System.String)">
            <summary>
            执行查询SQL语句(存到DataSet)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetDataSet(System.Collections.Generic.List{System.String})">
            <summary>
            执行查询SQL语句(存到DataSet)(多表)
            </summary>
            <param name="listSelect">查询SQL集合</param>
            <returns>DataSet(多表)</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.GetDataTable(System.String)">
            <summary>
            执行查询SQL语句(存到DataTable)
            </summary>
            <param name="sqlSelect">查询SQL</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveData(System.String,System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            手动传给目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveByteData(System.String,System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveByteData(System.String,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable)">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.SqlServer.SqlServerHelper.SaveByteData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存带有二进制字段的数据(追加DataTable数据到指定数据库表)
            根据字段名称查找DataTable中的数据并写入数据库
            自动获取目标数据库表的字段名和类型
            主键字段数据冲突或者为空会导致保存失败
            根据目标与源的字段名对应关系读取DataTable中的数据
            </summary>
            <param name="strTableName">数据库表名</param>
            <param name="dicFieldNameType">目标数据字段名和类型</param>
            <param name="dtSourceData">源数据DataTable</param>
            <param name="dicCorrespondenceBetween">目标与源的字段名对应关系(目标字段名/源字段名)</param>
            <returns>成功返回执行条数,失败返回-1</returns>
        </member>
        <member name="T:ADO.Helper.TXT.TXTHelper">
            <summary>
            TXT文本帮助类
            创建日期:2016年12月8日
            </summary>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.WriteFile(System.String,System.String)">
            <summary>
            写入文本到TXT(如果有文件不进行操作)
            </summary>
            <param name="strPath">TXT储存路径</param>
            <param name="strTXT">文本内容</param>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.WriteFile(System.String,System.String,System.Boolean)">
            <summary>
            写入文本到TXT(选择是否覆盖)
            </summary>
            <param name="strPath">TXT储存路径</param>
            <param name="strTXT">文本内容</param>
            <param name="boolCover">(true)如果冲突覆盖文件,(false)如果冲突不进行操作</param>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.AppendFile(System.String,System.String)">
            <summary>
            写入文本到TXT,追加写入文件(如果不存在自动创建)
            </summary>
            <param name="strPath">TXT储存路径</param>
            <param name="strTXT">文本内容</param>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.AppendFile(System.String,System.String,System.Boolean)">
            <summary>
            写入文本到TXT,追加写入文件(如果不存在自动创建)(是否换行)
            </summary>
            <param name="strPath">TXT储存路径</param>
            <param name="strTXT">文本内容</param>
            <param name="boolWrap">(true)换行,(false)不换行</param>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.Logs(System.String)">
            <summary>
            ADO.Helper帮助类日志文件
            </summary>
            <param name="strLogs">异常信息</param>
            <returns>成功返回0,失败返回-1</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.GetFileString(System.String)">
            <summary>
            读取TXT文件中的文本
            </summary>
            <param name="strPath">TXT文件路径</param>
            <returns>TXT文件中的文本</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.GetFileArray(System.String)">
            <summary>
            读取TXT文件中的文本(按照每行存到string[]中)
            </summary>
            <param name="strPath">TXT文件路径</param>
            <returns>TXT文件中的文本(string[])</returns>
        </member>
        <member name="M:ADO.Helper.TXT.TXTHelper.GetFileList(System.String)">
            <summary>
            读取TXT文件中的文本(按照每行存到listString中)
            </summary>
            <param name="strPath">TXT文件路径</param>
            <returns>TXT文件中的文本(listString)</returns>
        </member>
    </members>
</doc>
